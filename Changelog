01/04/2021
    1. HandEvaluator executes 'checksForMultiples', 'isAFLush', and 'isAStraight' in the constructor.
    2. HandEvaluator now uses the 'sortHand' method, taken from 'isAStraight', since it will need to be sorted anyway.
    3. Getters added to HandEvaluator.
    4. GameOutcome class added. Uses information from the HandEvaluators to compare hands and determine winner. It
        currently determines a winner by hand rank. It does not yet compare further in the event of a ranking match.

12/30/2020
    1. HandEvaluator class added. Currently evaluates for straights and flushes.
    2. 'card.setName()' in DeckOfCards -> buildDeck removed due to issues regarding Jokers. Cards currently no longer
        have names.
    3. Method added to HandEvaluator to check for pairs, trips, and quads in a hand. It currently counts multiples of
       every card. It does not yet determine the final hand rank.

12/27/2020
    1. Minor class changes. user's name is now set in ConsoleMenu and the player object gets it.

12/25/2020
    1. ConsoleMenu's gameToStart field changed from an enum state machine to a String.
    2. GameMode now sets the gameMode by getting gameToStart from ConsoleMenu.

12/24/2020
    1. Added Console Menu class and Game Mode class.
    2. Added a unit test for shuffling.

12/23/2020
    1. Refactored some code from handShuffle into smaller helper methods.
    2. Added Player, Dealer, and Chips classes.

12/21/2020
    1. "Hand-shuffling" (i.e. a shuffle method that simulates hand shuffling) has been implemented. Includes private methods to riffle, box, and cut.

12/19/2020
    1. Implemented a test file for unit testing. Test cases for size, values, and suits.
    2. Added a JokerCard subclass that inherits from PlayerCard class.
    3. Added a Shuffler class for all procedures related to deck shuffling. Deck randomization implemented to simulate a machine shuffle.

12/18/2020
    1. The application is kept open with a while loop.
    2. A class for the card deck. Uses a method to build the deck, using an array to hold each card. Assign each card a value and suit.
    3. A class for playing card objects. A playing card will have a value and an attribute.
